{"ast":null,"code":"var _jsxFileName = \"/Users/chenjian/react-gq/src/App.js\";\nimport React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query, ApolloProvider, useQuery } from \"react-apollo\";\nimport { ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nconst QUERY_USERS = gql`\nquery {\n  users {\n\n    name\n\n  }\n}\n`;\nexport function UserInfo() {\n  // Polling: rovides near-real-time synchronization with your server\n  // by causing a query to execute periodically at a specified interval\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_USERS, {\n    pollInterval: 500\n  });\n  console.log(data); // should handle loading status\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  return data.users.map(({\n    name\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, name)));\n}\n/*\nconst client = new ApolloClient({\n    uri: 'http://54.197.2.14/graphql/',\n});*/\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n    uri: 'http://54.197.2.14/graphql/',\n    // 这个url可以抽取到配置文件里\n    fetch: fetch\n  }),\n  cache: new InMemoryCache()\n});\n\nconst App = () => /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    backgroundColor: '#00000008',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    flexDirection: 'column'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }\n}, \"My first Apollo app \\uD83D\\uDE80\"), /*#__PURE__*/React.createElement(UserInfo, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }\n})));\n\nexport default App;","map":{"version":3,"sources":["/Users/chenjian/react-gq/src/App.js"],"names":["React","gql","Query","ApolloProvider","useQuery","ApolloClient","InMemoryCache","createHttpLink","QUERY_USERS","UserInfo","data","loading","pollInterval","console","log","users","map","name","client","link","uri","fetch","cache","App","backgroundColor","display","justifyContent","alignItems","height","flexDirection"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAA+BC,QAA/B,QAA8C,cAA9C;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAAyC,cAAzC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,MAAMC,WAAW,GAAGP,GAAI;;;;;;;;CAAxB;AAYA,OAAO,SAASQ,QAAT,GAAoB;AAEzB;AACA;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBP,QAAQ,CAACI,WAAD,EAAc;AAAEI,IAAAA,YAAY,EAAE;AAAhB,GAAd,CAAlC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EALyB,CAMzB;;AACA,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEb,SAAOD,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAGC,IAAAA;AAAH,GAAD,kBACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADF,CADK,CAAP;AAOD;AACD;;;;;AAMA,MAAMC,MAAM,GAAG,IAAIb,YAAJ,CAAiB;AAC9Bc,EAAAA,IAAI,EAAEZ,cAAc,CAAC;AACrBa,IAAAA,GAAG,EAAE,6BADgB;AACe;AAClCC,IAAAA,KAAK,EAAEA;AAFY,GAAD,CADU;AAM5BC,EAAAA,KAAK,EAAC,IAAIhB,aAAJ;AANsB,CAAjB,CAAf;;AAWC,MAAMiB,GAAG,GAAG,mBACX,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEL,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAK,EAAA,KAAK,EAAE;AACVM,IAAAA,eAAe,EAAE,WADP;AAEVC,IAAAA,OAAO,EAAE,MAFC;AAGVC,IAAAA,cAAc,EAAE,QAHN;AAIVC,IAAAA,UAAU,EAAC,QAJD;AAKVC,IAAAA,MAAM,EAAE,OALE;AAMVC,IAAAA,aAAa,EAAE;AANL,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCARF,eAWE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAXF,CADF,CADD;;AAmBD,eAAeN,GAAf","sourcesContent":["import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query ,ApolloProvider,useQuery} from \"react-apollo\";\nimport {ApolloClient, InMemoryCache}from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst QUERY_USERS = gql`\nquery {\n  users {\n\n    name\n\n  }\n}\n`;\n\n\n\nexport function UserInfo() {\n\n  // Polling: rovides near-real-time synchronization with your server\n  // by causing a query to execute periodically at a specified interval\n  const { data, loading } = useQuery(QUERY_USERS, { pollInterval: 500 });\n  console.log(data)\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n\n  return data.users.map(({  name }) => (\n    <div>\n      <p>\n       { name }\n      </p>\n    </div>\n  ));\n}\n/*\nconst client = new ApolloClient({\n    uri: 'http://54.197.2.14/graphql/',\n});*/\n\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n  uri: 'http://54.197.2.14/graphql/', // 这个url可以抽取到配置文件里\n    fetch: fetch,\n\n  }),\n    cache:new InMemoryCache(),\n})\n\n\n\n const App = () => (\n  <ApolloProvider client={client}>\n    <div style={{\n      backgroundColor: '#00000008',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems:'center',\n      height: '100vh',\n      flexDirection: 'column'\n    }}>\n      <h2>My first Apollo app 🚀</h2>\n\n\n      <UserInfo/>\n\n    </div>\n  </ApolloProvider>\n\n);\nexport default App;\n"]},"metadata":{},"sourceType":"module"}