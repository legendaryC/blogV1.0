{"ast":null,"code":"var _jsxFileName = \"/Users/chenjian/react-gq/src/index.js\";\nimport React from \"react\";\nimport { AppRegistry, View, StyleSheet } from \"react-native-web\";\nimport ApolloClient from \"apollo-boost\";\nimport { Query, ApolloProvider, useQuery } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nconst client = new ApolloClient({\n  uri: \"http://54.197.2.14/graphql/\"\n});\nconst ExchangeRateQuery = gql`\nquery  {\n   actors {\n    id\n    name\n  }\n}\n`;\nclient.query({\n  query: gql`\n      {\n         {\n           actors {\n            id\n            name\n          }\n        }\n      }\n    `\n}).then(result => console.log(result));\n\nconst App = () => /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Query, {\n  query: ExchangeRateQuery,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }\n}, ({\n  loading,\n  error,\n  data\n}) => {\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  }, \"loading;\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 27\n    }\n  }, \"error();;\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, data.rates);\n}));\n\nAppRegistry.registerComponent(\"App\", () => App);\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});","map":{"version":3,"sources":["/Users/chenjian/react-gq/src/index.js"],"names":["React","AppRegistry","View","StyleSheet","ApolloClient","Query","ApolloProvider","useQuery","gql","client","uri","ExchangeRateQuery","query","then","result","console","log","App","loading","error","data","rates","registerComponent","runApplication","rootTag","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,IAAtB,EAA4BC,UAA5B,QAA8C,kBAA9C;AAEA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAA+BC,QAA/B,QAA8C,cAA9C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAMA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAC;AAD0B,CAAjB,CAAf;AAIA,MAAMC,iBAAiB,GAAGH,GAAI;;;;;;;CAA9B;AAQAC,MAAM,CACHG,KADH,CACS;AACLA,EAAAA,KAAK,EAAEJ,GAAI;;;;;;;;;;AADN,CADT,EAaGK,IAbH,CAaQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAblB;;AAgBA,MAAMG,GAAG,GAAG,mBACV,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAER,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEE,oBAAC,KAAD;AAAO,EAAA,KAAK,EAAEE,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACG,CAAC;AAAEO,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA;AAAlB,CAAD,KAA8B;AAC7B,MAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AAEX,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,KADR,CADF;AAMD,CAXH,CAFF,CADF;;AAsBApB,WAAW,CAACqB,iBAAZ,CAA8B,KAA9B,EAAqC,MAAML,GAA3C;AACAhB,WAAW,CAACsB,cAAZ,CAA2B,KAA3B,EAAkC;AAAEC,EAAAA,OAAO,EAAEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB;AAAX,CAAlC","sourcesContent":["import React from \"react\";\nimport { AppRegistry, View, StyleSheet } from \"react-native-web\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { Query ,ApolloProvider,useQuery} from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\n\n\n\n\nconst client = new ApolloClient({\n  uri:\"http://54.197.2.14/graphql/\"\n});\n\nconst ExchangeRateQuery = gql`\nquery  {\n   actors {\n    id\n    name\n  }\n}\n`;\nclient\n  .query({\n    query: gql`\n      {\n         {\n           actors {\n            id\n            name\n          }\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n\n\nconst App = () => (\n  <ApolloProvider client={client}>\n  {\n    <Query query={ExchangeRateQuery} >\n      {({ loading, error, data }) => {\n        if (loading) return <p>loading;</p>;\n        if (error) return <p>error();;</p>;\n\n        return (\n          <div >\n            {data.rates\n             }\n          </div>\n        );\n      }}\n    </Query>\n\n  }\n  </ApolloProvider>\n);\n\n\nAppRegistry.registerComponent(\"App\", () => App);\nAppRegistry.runApplication(\"App\", { rootTag: document.getElementById(\"root\") });\n"]},"metadata":{},"sourceType":"module"}