{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/chenjian/react-gq/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n {\\n    users {\\n\\n      name\\n\\n    }\\n  \\n}\"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import{gql}from'apollo-boost';import{Query,ApolloProvider,useQuery}from\"react-apollo\";import{ApolloClient,InMemoryCache}from\"apollo-boost\";import{createHttpLink}from\"apollo-link-http\";import{fetch}from\"node-fetch\";var QUERY_USERS=gql(_templateObject());export function UserInfo(){// Polling: rovides near-real-time synchronization with your server\n// by causing a query to execute periodically at a specified interval\n/* const query=QUERY_USERS\n  const varibles={}\n  const p = new Promise( (resolve) => {\n    client.query({\n      query,\n      varibles,\n      \n    }).then((res) => {\n      resolve(res.data)\n    })\n  })*/var _useQuery=useQuery(QUERY_USERS,{pollInterval:500}),data=_useQuery.data,loading=_useQuery.loading;console.log(data);// should handle loading status\nif(loading)return/*#__PURE__*/React.createElement(\"p\",null,\"Loading...\");return data.users.map(function(_ref){var name=_ref.name;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",null,name));});}/*\nconst client = new ApolloClient({\n    uri: 'http://54.197.2.14/graphql/',\n});*/var client=new ApolloClient({link:createHttpLink({uri:'https://54.197.2.14:80/graphql/',// 这个url可以抽取到配置文件里\nfetchOptions:{method:\"POST\"}}),cache:new InMemoryCache()});var App=function App(){return/*#__PURE__*/React.createElement(ApolloProvider,{client:client},/*#__PURE__*/React.createElement(\"div\",{style:{backgroundColor:'#00000008',display:'flex',justifyContent:'center',alignItems:'center',height:'100vh',flexDirection:'column'}},/*#__PURE__*/React.createElement(\"h2\",null,\"My first Apollo app \\uD83D\\uDE80\"),/*#__PURE__*/React.createElement(UserInfo,null)));};export default App;","map":{"version":3,"sources":["/Users/chenjian/react-gq/src/App.js"],"names":["React","gql","Query","ApolloProvider","useQuery","ApolloClient","InMemoryCache","createHttpLink","fetch","QUERY_USERS","UserInfo","pollInterval","data","loading","console","log","users","map","name","client","link","uri","fetchOptions","method","cache","App","backgroundColor","display","justifyContent","alignItems","height","flexDirection"],"mappings":"qVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,cAApB,CACA,OAASC,KAAT,CAAgBC,cAAhB,CAA+BC,QAA/B,KAA8C,cAA9C,CACA,OAAQC,YAAR,CAAsBC,aAAtB,KAAyC,cAAzC,CACA,OAASC,cAAT,KAA+B,kBAA/B,CACA,OAAQC,KAAR,KAAoB,YAApB,CAEA,GAAMC,CAAAA,WAAW,CAAGR,GAAH,mBAAjB,CAYA,MAAO,SAASS,CAAAA,QAAT,EAAoB,CAEzB;AACA;AACD;;;;;;;;;;MAJ0B,cAgBCN,QAAQ,CAACK,WAAD,CAAc,CAAEE,YAAY,CAAE,GAAhB,CAAd,CAhBT,CAgBjBC,IAhBiB,WAgBjBA,IAhBiB,CAgBXC,OAhBW,WAgBXA,OAhBW,CAiBzBC,OAAO,CAACC,GAAR,CAAYH,IAAZ,EACA;AACA,GAAIC,OAAJ,CAAa,mBAAO,0CAAP,CAEb,MAAOD,CAAAA,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAe,kBAAIC,CAAAA,IAAJ,MAAIA,IAAJ,oBACpB,4CACE,6BACGA,IADH,CADF,CADoB,EAAf,CAAP,CAOD,CACD;;;KAMA,GAAMC,CAAAA,MAAM,CAAG,GAAId,CAAAA,YAAJ,CAAiB,CAC9Be,IAAI,CAAEb,cAAc,CAAC,CACfc,GAAG,CAAE,iCADU,CACyB;AAExCC,YAAY,CAAC,CAACC,MAAM,CAAC,MAAR,CAHE,CAAD,CADU,CAM9BC,KAAK,CAAC,GAAIlB,CAAAA,aAAJ,EANwB,CAAjB,CAAf,CAWC,GAAMmB,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,sBACX,oBAAC,cAAD,EAAgB,MAAM,CAAEN,MAAxB,eACE,2BAAK,KAAK,CAAE,CACVO,eAAe,CAAE,WADP,CAEVC,OAAO,CAAE,MAFC,CAGVC,cAAc,CAAE,QAHN,CAIVC,UAAU,CAAC,QAJD,CAKVC,MAAM,CAAE,OALE,CAMVC,aAAa,CAAE,QANL,CAAZ,eAQE,iEARF,cAWE,oBAAC,QAAD,MAXF,CADF,CADW,EAAZ,CAmBD,cAAeN,CAAAA,GAAf","sourcesContent":["import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query ,ApolloProvider,useQuery} from \"react-apollo\";\nimport {ApolloClient, InMemoryCache}from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport {fetch} from \"node-fetch\"\n\nconst QUERY_USERS = gql`\n {\n    users {\n\n      name\n\n    }\n  \n}`;\n\n\n\nexport function UserInfo() {\n  \n  // Polling: rovides near-real-time synchronization with your server\n  // by causing a query to execute periodically at a specified interval\n /* const query=QUERY_USERS\n  const varibles={}\n  const p = new Promise( (resolve) => {\n    client.query({\n      query,\n      varibles,\n      \n    }).then((res) => {\n      resolve(res.data)\n    })\n  })*/\n  \n  const { data, loading } = useQuery(QUERY_USERS, { pollInterval: 500 });\n  console.log(data)\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n\n  return data.users.map(({  name }) => (\n    <div>\n      <p>\n       { name }\n      </p>\n    </div>\n  ));\n}\n/*\nconst client = new ApolloClient({\n    uri: 'http://54.197.2.14/graphql/',\n});*/\n\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n        uri: 'https://54.197.2.14:80/graphql/', // 这个url可以抽取到配置文件里\n        \n        fetchOptions:{method:\"POST\"},\n        }),\n  cache:new InMemoryCache(),\n})\n\n\n\n const App = () => (\n  <ApolloProvider client={client}>\n    <div style={{\n      backgroundColor: '#00000008',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems:'center',\n      height: '100vh',\n      flexDirection: 'column'\n    }}>\n      <h2>My first Apollo app 🚀</h2>\n\n\n      <UserInfo/>\n\n    </div>\n  </ApolloProvider>\n\n);\nexport default App;\n"]},"metadata":{},"sourceType":"module"}