{"ast":null,"code":"var _jsxFileName = \"/Users/chenjian/react-gq/src/App.js\";\nimport React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query, ApolloProvider, useQuery } from \"react-apollo\";\nimport { ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\nconst QUERY_USERS = gql`\n {\n    users {\n\n      name\n\n    }\n  \n}`;\nexport function UserInfo() {\n  // Polling: rovides near-real-time synchronization with your server\n  // by causing a query to execute periodically at a specified interval\n\n  /* const query=QUERY_USERS\n   const varibles={}\n   const p = new Promise( (resolve) => {\n     client.query({\n       query,\n       varibles,\n       \n     }).then((res) => {\n       resolve(res.data)\n     })\n   })*/\n  fetch(\"https://54.197.2.14:80/graphql/?a=1\").then(response => {\n    if (response.ok) {} else {\n      throw new Error('Something went wrong ...');\n    }\n  });\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_USERS, {\n    pollInterval: 500\n  });\n  console.log(data); // should handle loading status\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  return data.users.map(({\n    name\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, name)));\n}\n/*\nconst client = new ApolloClient({\n    uri: 'http://54.197.2.14/graphql/',\n});*/\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n    uri: 'https://54.197.2.14:80/graphql/',\n    // 这个url可以抽取到配置文件里\n    headers: {\n      'Content-Type': 'application/graphql',\n      \"Access-Control-Allow-Origin\": \"http://localhost:3000\"\n    },\n    fetchOptions: {\n      method: \"GET\"\n    }\n  }),\n  cache: new InMemoryCache()\n});\n\nconst App = () => /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  style: {\n    backgroundColor: '#00000008',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    flexDirection: 'column'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }\n}, \"My first Apollo app \\uD83D\\uDE80\"), /*#__PURE__*/React.createElement(UserInfo, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }\n})));\n\nexport default App;","map":{"version":3,"sources":["/Users/chenjian/react-gq/src/App.js"],"names":["React","gql","Query","ApolloProvider","useQuery","ApolloClient","InMemoryCache","createHttpLink","QUERY_USERS","UserInfo","fetch","then","response","ok","Error","data","loading","pollInterval","console","log","users","map","name","client","link","uri","headers","fetchOptions","method","cache","App","backgroundColor","display","justifyContent","alignItems","height","flexDirection"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAA+BC,QAA/B,QAA8C,cAA9C;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAAyC,cAAzC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,MAAMC,WAAW,GAAGP,GAAI;;;;;;;;EAAxB;AAYA,OAAO,SAASQ,QAAT,GAAoB;AAEzB;AACA;;AACD;;;;;;;;;;;AAWCC,EAAAA,KAAK,CAAC,qCAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAI;AACf,QAAIA,QAAQ,CAACC,EAAb,EAAiB,CAGf,CAHF,MAGQ;AACL,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACH,GARF;AAUA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBZ,QAAQ,CAACI,WAAD,EAAc;AAAES,IAAAA,YAAY,EAAE;AAAhB,GAAd,CAAlC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EA1ByB,CA2BzB;;AACA,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEb,SAAOD,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAGC,IAAAA;AAAH,GAAD,kBACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,CADF,CADK,CAAP;AAOD;AACD;;;;;AAMA,MAAMC,MAAM,GAAG,IAAIlB,YAAJ,CAAiB;AAC9BmB,EAAAA,IAAI,EAAEjB,cAAc,CAAC;AACfkB,IAAAA,GAAG,EAAE,iCADU;AACyB;AACxCC,IAAAA,OAAO,EAAE;AAAC,sBAAgB,qBAAjB;AAAuC,qCAA8B;AAArE,KAFM;AAGfC,IAAAA,YAAY,EAAC;AAACC,MAAAA,MAAM,EAAC;AAAR;AAHE,GAAD,CADU;AAM9BC,EAAAA,KAAK,EAAC,IAAIvB,aAAJ;AANwB,CAAjB,CAAf;;AAWC,MAAMwB,GAAG,GAAG,mBACX,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEP,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAK,EAAA,KAAK,EAAE;AACVQ,IAAAA,eAAe,EAAE,WADP;AAEVC,IAAAA,OAAO,EAAE,MAFC;AAGVC,IAAAA,cAAc,EAAE,QAHN;AAIVC,IAAAA,UAAU,EAAC,QAJD;AAKVC,IAAAA,MAAM,EAAE,OALE;AAMVC,IAAAA,aAAa,EAAE;AANL,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCARF,eAWE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAXF,CADF,CADD;;AAmBD,eAAeN,GAAf","sourcesContent":["import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query ,ApolloProvider,useQuery} from \"react-apollo\";\nimport {ApolloClient, InMemoryCache}from \"apollo-boost\";\nimport { createHttpLink } from \"apollo-link-http\";\n\n\nconst QUERY_USERS = gql`\n {\n    users {\n\n      name\n\n    }\n  \n}`;\n\n\n\nexport function UserInfo() {\n  \n  // Polling: rovides near-real-time synchronization with your server\n  // by causing a query to execute periodically at a specified interval\n /* const query=QUERY_USERS\n  const varibles={}\n  const p = new Promise( (resolve) => {\n    client.query({\n      query,\n      varibles,\n      \n    }).then((res) => {\n      resolve(res.data)\n    })\n  })*/\n  fetch(\"https://54.197.2.14:80/graphql/?a=1\")\n  .then(response => {\n     if (response.ok) {\n        \n         \n      } else {\n        throw new Error('Something went wrong ...');\n      }\n   })\n\n  const { data, loading } = useQuery(QUERY_USERS, { pollInterval: 500 });\n  console.log(data)\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n\n  return data.users.map(({  name }) => (\n    <div>\n      <p>\n       { name }\n      </p>\n    </div>\n  ));\n}\n/*\nconst client = new ApolloClient({\n    uri: 'http://54.197.2.14/graphql/',\n});*/\n\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n        uri: 'https://54.197.2.14:80/graphql/', // 这个url可以抽取到配置文件里\n        headers: {'Content-Type': 'application/graphql',\"Access-Control-Allow-Origin\":\"http://localhost:3000\"},\n        fetchOptions:{method:\"GET\"},\n        }),\n  cache:new InMemoryCache(),\n})\n\n\n\n const App = () => (\n  <ApolloProvider client={client}>\n    <div style={{\n      backgroundColor: '#00000008',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems:'center',\n      height: '100vh',\n      flexDirection: 'column'\n    }}>\n      <h2>My first Apollo app 🚀</h2>\n\n\n      <UserInfo/>\n\n    </div>\n  </ApolloProvider>\n\n);\nexport default App;\n"]},"metadata":{},"sourceType":"module"}