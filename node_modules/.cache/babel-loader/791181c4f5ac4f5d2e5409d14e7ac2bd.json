{"ast":null,"code":"var _jsxFileName = \"/Users/chenjian/react-gq/src/App.js\";\nimport React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst QUERY_USERS = gql`\nquery {\n  users {\n    id\n    name\n    lastName\n  }\n}\n`;\nconst CREATE_USER = gql`\nmutation createUser ($name: String!, $lastName: String!){\n  createUser (name: $name, lastName: $lastName){\n    id\n    name\n    lastName\n  }\n}\n`;\nexport function UserInfo() {\n  // Polling: rovides near-real-time synchronization with your server\n  // by causing a query to execute periodically at a specified interval\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_USERS, {\n    pollInterval: 500\n  }); // should handle loading status\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  return data.users.map(({\n    id,\n    name,\n    lastName\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"User - \", id, \": \", name, \" \", lastName)));\n}\nexport default App;","map":{"version":3,"sources":["/Users/chenjian/react-gq/src/App.js"],"names":["React","useQuery","useMutation","gql","QUERY_USERS","CREATE_USER","UserInfo","data","loading","pollInterval","users","map","id","name","lastName","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AACA,SAASC,GAAT,QAAoB,cAApB;AAGA,MAAMC,WAAW,GAAGD,GAAI;;;;;;;;CAAxB;AAUA,MAAME,WAAW,GAAGF,GAAI;;;;;;;;CAAxB;AAWA,OAAO,SAASG,QAAT,GAAoB;AAEzB;AACA;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBP,QAAQ,CAACG,WAAD,EAAc;AAAEK,IAAAA,YAAY,EAAE;AAAhB,GAAd,CAAlC,CAJyB,CAKzB;;AACA,MAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEb,SAAOD,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,IAAN;AAAYC,IAAAA;AAAZ,GAAD,kBACpB;AAAK,IAAA,GAAG,EAAGF,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACWA,EADX,QACmBC,IADnB,OAC4BC,QAD5B,CADF,CADK,CAAP;AAOD;AAKD,eAAeC,GAAf","sourcesContent":["import React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\n\nconst QUERY_USERS = gql`\nquery {\n  users {\n    id\n    name\n    lastName\n  }\n}\n`;\n\nconst CREATE_USER = gql`\nmutation createUser ($name: String!, $lastName: String!){\n  createUser (name: $name, lastName: $lastName){\n    id\n    name\n    lastName\n  }\n}\n`;\n\n\nexport function UserInfo() {\n\n  // Polling: rovides near-real-time synchronization with your server\n  // by causing a query to execute periodically at a specified interval\n  const { data, loading } = useQuery(QUERY_USERS, { pollInterval: 500 });\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n\n  return data.users.map(({ id, name, lastName }) => (\n    <div key={ id }>\n      <p>\n        User - { id }: { name } { lastName }\n      </p>\n    </div>\n  ));\n}\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}